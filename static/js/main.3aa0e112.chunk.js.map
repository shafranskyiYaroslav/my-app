{"version":3,"sources":["store/constants.tsx","store/actions.tsx","components/Image/api.tsx","components/Image/Image.tsx","components/Button/ButtonComponent.tsx","components/TextInput/TextInput.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/CheckboxesList.tsx","components/TodoVisualiser/TodoVisualiser.tsx","App.tsx","components/Image/imageReducer.tsx","components/TodoVisualiser/actualListReducer.tsx","components/TodoVisualiser/inputValueReducer.tsx","components/TodoVisualiser/todoListReducer.tsx","store/reducer.tsx","store/store.tsx","index.tsx"],"names":["ActionTypes","TodoItemStatuses","buttons","title","type","ADD_IMAGE","CHANGE_INPUT_VALUE","ADD_NEW_TASK","CHANGE_TASK_STATUS","CLEAR_TASK","CLEAR_ALL_TASKS","CHANGE_ACTUAL_LIST","actionFactory","payload","addNewTask","changeTaskStatus","clearTask","changeList","showImages","changeInputValue","clearAllTasks","getImageURL","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","images","memes","index","wrap","_context","prev","next","fetch","concat","sent","json","data","Math","floor","random","length","abrupt","url","stop","apply","this","arguments","Image","imageURL","props","react","className","src","alt","React","connect","ButtonComponent","onClick","Button","block","color","size","toggle","TextInput","inputValue","onChangeValue","onSubmitValue","value","placeholder","onChange","event","target","onKeyUp","trimmedValue","trim","keyCode","COMPLETED","IN_PROGRESS","TodoItem","item","onChangeStatus","id","name","isDone","status","ListGroupItem","checked","ChecboxesList","list","ListGroup","map","components_TodoItem_TodoItem","key","_ref3","todoList","actualList","newTaskId","components_TextInput_TextInput","TodoList_CheckboxesList","filter","el","_ref2","Button_ButtonComponent","App","react_default","createElement","components_Image_Image","components_TodoVisualiser_TodoVisualiser","imageReducer","state","undefined","actualListReducer","inputValueReducer","todoListReducer","toConsumableArray","todo","_objectSpread","initialState","store","createStore","action","composeWithDevTools","applyMiddleware","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.3aa0e112.chunk.js","sourcesContent":["export enum ActionTypes {\r\n    ADD_IMAGE = 'ADD_IMAGE',\r\n    ADD_NEW_TASK = 'ADD_NEW_TASK',\r\n    CHANGE_INPUT_VALUE = 'CHANGE_INPUT_VALUE',\r\n    CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS',\r\n    CLEAR_TASK = 'CLEAR_TASK',\r\n    CLEAR_ALL_TASKS = 'CLEAR_ALL_TASKS',\r\n    CHANGE_ACTUAL_LIST = 'CHANGE_ACTUAL_LIST'\r\n}\r\n\r\nexport const ENTER_KEY_CODE = 13;\r\n\r\n  \r\nexport const TodoItemStatuses = {\r\n  COMPLETED: 'COMPLETED',\r\n  IN_PROGRESS: 'IN_PROGRESS'\r\n}\r\n\r\nconst { COMPLETED, IN_PROGRESS } = TodoItemStatuses;\r\n\r\nexport const buttons = [\r\n\t{\r\n  \ttitle: 'All',\r\n\t\ttype: 'ALL',\r\n\t},\r\n\r\n\t{\r\n\t\ttitle: 'Finished',\r\n\t\ttype: COMPLETED\r\n\t},\r\n\r\n\t{\r\n\t\ttitle: 'Active',\r\n\t\ttype: IN_PROGRESS\r\n\t}\r\n]","import { ActionTypes } from \"./constants\";\r\nimport { IAction } from \"./types\";\r\n\r\nconst {\r\n  ADD_IMAGE,\r\n  CHANGE_INPUT_VALUE,\r\n  ADD_NEW_TASK,\r\n  CHANGE_TASK_STATUS,\r\n  CLEAR_TASK,\r\n  CLEAR_ALL_TASKS,\r\n  CHANGE_ACTUAL_LIST,\r\n} = ActionTypes;\r\n\r\nexport function actionFactory<T, P>(type: T): (payload: P) => IAction<T, P> {\r\n  return (payload: P) => ({\r\n    payload,\r\n    type,\r\n  });\r\n}\r\n\r\nexport const addNewTask = actionFactory<string, object>(ADD_NEW_TASK);\r\nexport const changeTaskStatus = actionFactory<string, object>(CHANGE_TASK_STATUS);\r\nexport const clearTask = actionFactory<string, object>(CLEAR_TASK);\r\nexport const changeList = actionFactory<string, object>(CHANGE_ACTUAL_LIST);\r\nexport const showImages = actionFactory<string, string>(ADD_IMAGE);\r\nexport const changeInputValue = actionFactory<string, string>(CHANGE_INPUT_VALUE);\r\nexport const clearAllTasks = actionFactory<string, null>(CLEAR_ALL_TASKS);\r\n","const URL: string = \"https://api.imgflip.com/get_memes\";\r\n\r\nexport const getImageURL = async () => {\r\n  const response = await fetch(`${URL}`);\r\n  const images = await response.json();\r\n  const memes = images.data.memes;\r\n  const index = Math.floor(Math.random() * memes.length);\r\n  return memes[index].url || \" \";\r\n};\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { showImages } from \"../../store/actions\";\r\nimport { getImageURL } from \"./api\";\r\nimport { IImage } from \"./ImageInterface\";\r\n\r\n\r\nclass Image extends React.Component<IImage> {\r\n\r\n  public async componentDidMount() {\r\n    const imageURL = await getImageURL();\r\n    const { showImages } = this.props;\r\n    if (showImages) {\r\n      showImages(imageURL);\r\n    }\r\n  }\r\n  public render() {\r\n    const { imageURL } = this.props;\r\n    return (\r\n      <div className=\"image-div\">\r\n        <h3 className=\"image-title\">It's time to do something useful!</h3>\r\n        <img src={imageURL} alt=\"mem\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ imageURL }: { imageURL: string }) => ({ imageURL });\r\n\r\nexport default connect(mapStateToProps, { showImages })(Image);\r\n","import * as React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { IButton } from \"./InterfaceButton\";\r\n\r\nconst ButtonComponent: React.FC<IButton> = (props) => {\r\n  const { type, title, onClick } = props;\r\n  return (\r\n    <div className=\"col-xs-4\">\r\n      <Button block color=\"secondary\" size=\"sm\" toggle onClick={() => {\r\n        onClick({type});\r\n      }}>{title}</Button>{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonComponent;\r\n","import * as React from \"react\";\r\nimport { ENTER_KEY_CODE } from \"../../store/constants\";\r\nimport ITextInput from \"./TextInputInterface\";\r\n\r\nconst TextInput: React.FC<ITextInput> = (props) => {\r\n  const { inputValue, onChangeValue, onSubmitValue } = props;\r\n  return (\r\n    <input\r\n      className=\"input\"\r\n      type=\"text\"\r\n      value={inputValue}\r\n      placeholder=\"Type new task\"\r\n      onChange={(event) => onChangeValue(event.target.value)}\r\n      onKeyUp={(event) => {\r\n        const trimmedValue = inputValue.trim();\r\n        if (event.keyCode === ENTER_KEY_CODE && trimmedValue.length > 0) {\r\n          onSubmitValue(trimmedValue);\r\n          onChangeValue(\"\");\r\n        }}}\r\n      />\r\n    );\r\n};\r\n\r\nexport default TextInput;\r\n","import * as React from \"react\";\r\nimport { ListGroupItem } from \"reactstrap\";\r\nimport { TodoItemStatuses } from \"../../store/constants\";\r\nimport { IItem } from \"./ItemInterface\";\r\n\r\nconst { COMPLETED, IN_PROGRESS } = TodoItemStatuses;\r\n\r\nconst TodoItem: React.FC<IItem> = (props) => {\r\n  const { item, onChangeStatus, clearTask } = props;\r\n  const { id, name, status } = item;\r\n  const isDone = status === COMPLETED;\r\n  return (\r\n    <ListGroupItem className=\"justify-content-between py-0\" color={isDone ? \"success\" : \"warning\"} >\r\n      <label className=\"todoItem\">\r\n        <input type=\"checkbox\"\r\n          checked={isDone}\r\n          onChange={ () => onChangeStatus({\r\n            id,\r\n            name,\r\n            status: isDone ? IN_PROGRESS : COMPLETED,\r\n          })}\r\n      />\r\n        {name}\r\n        <button onClick={ () => clearTask({ id }) }>X</button>\r\n        <br />\r\n      </label>\r\n    </ListGroupItem>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import * as React from \"react\";\r\nimport { ListGroup } from \"reactstrap\";\r\nimport { ITodoItem } from \"../../store/types\";\r\nimport TodoItem from \"../TodoItem/TodoItem\";\r\nimport \"./CheckboxesList.css\";\r\nimport IChecboxesList from \"./CheckboxesListInterfase\";\r\n\r\nconst ChecboxesList: React.FC<IChecboxesList> = (props) => {\r\n  const { list, onChangeStatus, clearTask } = props;\r\n  return (\r\n    <div className=\"container\">\r\n      <ListGroup>\r\n      {\r\n        list.length > 0 && list.map((item: ITodoItem, index: number) =>\r\n          <TodoItem key={index} item={item} onChangeStatus={onChangeStatus} clearTask={clearTask}/>,\r\n        )\r\n      }\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChecboxesList;\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addNewTask, changeInputValue, changeList, changeTaskStatus, clearAllTasks, clearTask } from \"../../store/actions\";\r\nimport { buttons, TodoItemStatuses } from \"../../store/constants\";\r\nimport { ITodoItem } from \"../../store/types\";\r\nimport ButtonComponent from \"../Button/ButtonComponent\";\r\nimport TextInput from \"../TextInput/TextInput\";\r\nimport CheckboxesList from \"../TodoList/CheckboxesList\";\r\nimport ITodoVisualiser from \"./TodoVisualiserInterface\";\r\n\r\nconst { IN_PROGRESS } = TodoItemStatuses;\r\n\r\nexport const TodoVisualiser: React.FC<ITodoVisualiser> = ({\r\n  changeInputValue,\r\n  inputValue,\r\n  addNewTask,\r\n  todoList,\r\n  changeTaskStatus,\r\n  clearTask,\r\n  clearAllTasks,\r\n  changeList,\r\n  actualList }) => {\r\n\r\n  const newTaskId = todoList.length;\r\n\r\n  const renderButtons = () =>\r\n    buttons.map(({type, title}) => <ButtonComponent type={type} title={title} onClick={changeList} key={title}/>);\r\n\r\n  const switchList = () => actualList === \"ALL\" ?\r\n    todoList :\r\n    todoList.filter((el: ITodoItem) => el.status === actualList);\r\n\r\n  return (\r\n    <div className=\"todo-visualiser\">\r\n      <TextInput\r\n        inputValue={inputValue}\r\n        onChangeValue={changeInputValue}\r\n        onSubmitValue={(value: string) => {\r\n          addNewTask({\r\n            id: newTaskId,\r\n            name: value,\r\n            status: IN_PROGRESS,\r\n          });\r\n        }}/>\r\n      <h3>Todo list</h3>\r\n      <h5>{actualList}:</h5>\r\n      <CheckboxesList\r\n        list={switchList()}\r\n        onChangeStatus={changeTaskStatus}\r\n        clearTask={clearTask}\r\n      />\r\n      <div className=\"container\">\r\n      <div className=\"row justify-content-center\">\r\n        { renderButtons() }\r\n        </div>\r\n      </div>\r\n      <br/>\r\n      <button onClick={() => clearAllTasks(null)}>Clear All</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ inputValue, todoList, actualList}: {\r\n  inputValue: string,\r\n  todoList: ITodoItem[],\r\n  actualList: string,\r\n  }) => ({ inputValue, todoList, actualList });\r\n\r\nexport default connect(mapStateToProps, {\r\n  addNewTask,\r\n  changeInputValue,\r\n  changeList,\r\n  changeTaskStatus,\r\n  clearAllTasks,\r\n  clearTask,\r\n  })(TodoVisualiser);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Image from \"./components/Image/Image\";\nimport TodoVisualiser from \"./components/TodoVisualiser/TodoVisualiser\";\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App container-fluid\">\n      <Image />\n      <TodoVisualiser />\n    </div>\n  );\n};\n\nexport default App;\n","import { ActionTypes } from \"../../store/constants\";\r\n\r\nconst { ADD_IMAGE } = ActionTypes;\r\n\r\nexport const imageReducer = (state: string = \"\", { payload, type }: any ): string => {\r\n  switch (type) {\r\n    case ADD_IMAGE:\r\n      return payload;\r\n  }\r\n  return state;\r\n};\r\n","import { ActionTypes } from \"../../store/constants\";\r\n\r\nconst { CHANGE_ACTUAL_LIST } = ActionTypes;\r\n\r\nexport const actualListReducer = (state: string = \"ALL\", { payload, type }: any ): string => {\r\n  switch (type) {\r\n    case CHANGE_ACTUAL_LIST:\r\n      return payload.type;\r\n  }\r\n  return state;\r\n};\r\n","import { ActionTypes } from \"../../store/constants\";\r\n\r\nconst { CHANGE_INPUT_VALUE } = ActionTypes;\r\n\r\nexport const inputValueReducer = (state: string = \"\", { payload, type }: any ): string => {\r\n  switch (type) {\r\n    case CHANGE_INPUT_VALUE:\r\n      return payload;\r\n  }\r\n  return state;\r\n};\r\n","import { ActionTypes } from \"../../store/constants\";\r\nimport { ITodoItem } from \"../../store/types\";\r\n\r\nconst {\r\n  ADD_NEW_TASK,\r\n  CHANGE_TASK_STATUS,\r\n  CLEAR_TASK,\r\n  CLEAR_ALL_TASKS,\r\n} = ActionTypes;\r\n\r\nexport const todoListReducer = (state: ITodoItem[] = [], { payload, type }: any ): ITodoItem[] => {\r\n  switch (type) {\r\n    case ADD_NEW_TASK: {\r\n      return [...state, payload];\r\n    }\r\n    case CHANGE_TASK_STATUS:\r\n      return state.map((todo: ITodoItem) => todo.id === payload.id ? {...payload} : todo);\r\n    case CLEAR_TASK:\r\n      return state.filter((todo: ITodoItem) => todo.id !== payload.id);\r\n    case CLEAR_ALL_TASKS:\r\n      return [];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { imageReducer } from \"../components/Image/imageReducer\";\r\nimport { actualListReducer } from \"../components/TodoVisualiser/actualListReducer\";\r\nimport { inputValueReducer } from \"../components/TodoVisualiser/inputValueReducer\";\r\nimport { todoListReducer } from \"../components/TodoVisualiser/todoListReducer\";\r\nimport { IStoreState } from \"./types\";\r\n\r\nconst initialState = {\r\n  actualList: \"ALL\",\r\n  imageURL: \"\",\r\n  inputValue: \"\",\r\n  todoList: [],\r\n};\r\n\r\nexport const reducer = (state: IStoreState = initialState, action: object ): any => {\r\n  return {\r\n    actualList: actualListReducer(state.actualList, action),\r\n    imageURL: imageReducer(state.imageURL, action),\r\n    inputValue: inputValueReducer(state.inputValue, action),\r\n    todoList: todoListReducer(state.todoList, action),\r\n  };\r\n};\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { reducer } from \"./reducer\";\r\nimport { IStoreState } from \"./types\";\r\n\r\nexport const store = createStore<IStoreState, any, any, any>(reducer, composeWithDevTools(\r\n  applyMiddleware(),\r\n));\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { store } from \"./store/store\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById(\"root\") as HTMLElement,\n);\n"],"sourceRoot":""}